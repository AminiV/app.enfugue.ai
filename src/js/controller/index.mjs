import { Shadowbox } from '../common/shadowbox.mjs';
import { isEmpty, titleCase } from '../base/helpers.mjs';
import { ElementBuilder } from '../base/builder.mjs';
import { Index as ToolIndex } from "./tools/index.autogenerated.mjs";

const E = new ElementBuilder();

class Controller {
    static Directory;

    constructor(application) {
        this.application = application
        this.initialize();
    }

    async initialize() {
        this.menu = {
            "file": await this.application.menu.addCategory("File"),
            "edit": await this.application.menu.addCategory("Edit"),
            "tools": await this.application.menu.addCategory("Tools")
        };

        this.initializeTools();
    }

    async initializeTools() {
        let toolControllers = [];
        for (let tool of ToolIndex) {
            let toolModule = await import(`./tools/${tool}`),
                toolController = toolModule.ToolController;

            if (isEmpty(toolController)) {
                console.warn("tool module at", tool, "does not provide a ToolController export.");
                continue;
            }
            if (isEmpty(toolController.toolName)) {
                // Base (or unnammed) tool.
                continue;
            }
            
            toolControllers.push(toolController);
        }
        toolControllers.sort((a, b) => a.toolName > b.toolName ? -1 : a.toolName < b.toolName ? 1 : 0);
        for (let toolController of toolControllers) {
            let controller = new toolController(this);
            await controller.initialize();
        }
    }
    
    async popState(e) {
        let state = e.state,
            controller = state.controller,
            viewController = state.viewController,
            viewControllerScope = state.viewControllerScope,
            title = this.getStateTitle(state);

        this.activateController(
            controller,
            viewController,
            viewControllerScope,
            false
        );
        document.title = title;
    }

    get windows() {
        return this.application.windows;
    }

    spawnWindow() {
        return this.application.windows.spawnWindow.apply(
            this.application.windows, 
            Array.from(arguments));
    }

    notify(level, title, message) {
        return this.application.notifications.push(level, title, message);
    }
}

export { Controller };
